{"columns":["query_description","outputs","token_count"],"data":[["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Retrieve all users with their email addresses.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n\n            ","```sql\nSELECT username, email \nFROM Users;\n```",12],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: List all tweets with their authors.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n\n            ","```sql\nSELECT t.content AS tweet, u.username AS author\nFROM Tweets t\nJOIN Users u ON t.user_id = u.user_id;\n```",31],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Find who user 'alice' is following.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n\n            ","```sql\nSELECT u.username\nFROM Users u\nJOIN Follows f ON u.user_id = f.followee_id\nJOIN Users alice ON f.follower_id = alice.user_id\nWHERE alice.username = 'alice';\n```",46],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Count the number of followers for each user.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n\n            ","```sql\nSELECT u.user_id, COUNT(f.follower_id) AS follower_count\nFROM Users u\nLEFT JOIN Follows f ON u.user_id = f.followee_id\nGROUP BY u.user_id;\n```",44],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Retrieve all tweets and their respective like counts.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh\n            ","```sql\nSELECT t.tweet_id, t.content, COALESCE(COUNT(l.like_id), 0) AS like_count\nFROM Tweets t\nLEFT JOIN Likes l ON t.tweet_id = l.tweet_id\nGROUP BY t.tweet_id, t.content;\n```",58],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Find all comments for a specific tweet.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh\n            ","```sql\nSELECT content, created_at\nFROM Comments\nWHERE tweet_id = <specific_tweet_id>;\n```\n\nReplace `<specific_tweet_id>` with the actual ID of the tweet for which you want to find the comments.",45],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: List users who liked tweets posted by 'alice'.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh\n            ","```sql\nSELECT DISTINCT u.username\nFROM Likes l\nJOIN Tweets t ON l.tweet_id = t.tweet_id\nJOIN Users u ON l.user_id = u.user_id\nWHERE t.user_id = (SELECT user_id FROM Users WHERE username = 'alice');\n```",56],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Find the tweet with the most comments.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh\n            ","```sql\nSELECT t.tweet_id, t.content, COUNT(c.comment_id) AS comment_count\nFROM Tweets t\nJOIN Comments c ON t.tweet_id = c.tweet_id\nGROUP BY t.tweet_id, t.content\nORDER BY comment_count DESC\nLIMIT 1;\n```",60],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: Retrieve users who have never posted a tweet.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n\n            ","```sql\nSELECT u.user_id, u.username, u.email, u.bio, u.created_at\nFROM Users u\nLEFT JOIN Tweets t ON u.user_id = t.user_id\nWHERE t.tweet_id IS NULL;\n```",47],["\n            Based on the embeddings in vector_embeddings_1536, generate the SQL query to answer: List tweets liked by users who follow 'alice'.\n            Please provide only the SQL code enclosed within ```sql...``` characters.\n            Context: ip.\n\u2022 FOREIGN KEY (followee_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a followee user deletes the follow\nrelationship.\n1\n\nLikes\nThis table stores information about which users like which tweets.\n\u2022 like_id: SERIAL PRIMARY KEY, a unique identifier for each like.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who liked the tweet.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the liked tweet.\n\u2022 liked_at:\nTIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the like occurred.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their likes.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its likes.\nComments\nThis table stores comments on tweets.\n\u2022 comment_id: SERIAL PRIMARY KEY, a unique identifier for each com-\nment.\n\u2022 tweet_id: INTEGER NOT NULL, a reference to the tweet being commented\non.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who made the com-\nment.\n\u2022 content: TEXT NOT NULL, the content of the comment.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the comment was created.\n\u2022 FOREIGN KEY (tweet_id):\nREFERENCES Tweets(tweet_id) ON\nDELETE CASCADE, ensures that deleting a tweet also deletes its comments.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their comments.\n2\n\n PostgreSQL Database Schema Documentation\nTables\nUsers\nThis table stores user information.\n\u2022 user_id: SERIAL PRIMARY KEY, a unique identifier for each user.\n\u2022 username: VARCHAR(50) NOT NULL UNIQUE, the user\u2019s unique username.\n\u2022 email: VARCHAR(100) NOT NULL UNIQUE, the user\u2019s unique email address.\n\u2022 password_hash: VARCHAR(100) NOT NULL, a hashed representation of\nthe user\u2019s password.\n\u2022 bio: TEXT, a short biography or description of the user.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the user was created.\nTweets\nThis table stores tweets posted by users.\n\u2022 tweet_id: SERIAL PRIMARY KEY, a unique identifier for each tweet.\n\u2022 user_id: INTEGER NOT NULL, a reference to the user who posted the\ntweet.\n\u2022 content: TEXT NOT NULL, the content of the tweet.\n\u2022 created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the tweet was created.\n\u2022 FOREIGN\nKEY\n(user_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a user also deletes their tweets.\nFollows\nThis table stores information about which users follow other users.\n\u2022 follower_id: INTEGER NOT NULL, the user who is following another user.\n\u2022 followee_id: INTEGER NOT NULL, the user who is being followed.\n\u2022 followed_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP, the timestamp\nwhen the follow action occurred.\n\u2022 PRIMARY KEY (follower_id, followee_id): ensures unique follower-\nfollowee pairs.\n\u2022 FOREIGN KEY (follower_id):\nREFERENCES Users(user_id) ON\nDELETE CASCADE, ensures that deleting a follower user deletes the follow\nrelationsh\n            ","```sql\nSELECT t.content\nFROM Tweets t\nJOIN Likes l ON t.tweet_id = l.tweet_id\nJOIN Users u ON l.user_id = u.user_id\nWHERE u.user_id IN (\n    SELECT f.follower_id\n    FROM Follows f\n    JOIN Users u2 ON f.followee_id = u2.user_id\n    WHERE u2.username = 'alice'\n);\n```",83]]}